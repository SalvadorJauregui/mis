/* 
Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set CAN contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
[[-1,1,0],[-1,-1,2],[0,-1,1],[1,-1,0]]
]
*/


class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        Set<Integer> set = new HashSet<>();     
        
        /* look for the correct combination */
        for (int i = 0; i < nums.length-2; i++){
            for(int j=i+1; j < nums.length-1; j++){
                int complement = -(nums[i]+nums[j]);
                if (set.contains(complement)){
                    list.add(Arrays.asList(nums[i],nums[j],complement));
                }else{
                    set.add(nums[j]);
                }
            }
        }        
        return list;        
    }
}




/* Solution 2: CANNNOT contain duplicated */
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        for(int i = 0; i < nums.length-2; i++) {
            /* To avoid duplicate */
            if(i > 0 && (nums[i] == nums[i-1])) 
                continue;
            /* two pinters technique */
            for(int j = i+1, k = nums.length-1; j<k;) {
                if(nums[i] + nums[j] + nums[k] == 0) {
                    list.add(Arrays.asList(nums[i],nums[j],nums[k]));
                    j++;k--;
                    /* Next two whiles are to avoid duplicates */
                    while((j < k) && (nums[j] == nums[j-1]))j++;
                    while((j < k) && (nums[k] == nums[k+1]))k--;
                }else if(nums[i] + nums[j] + nums[k] > 0)
                    k--;
                else j++;
            }
        }
        return list;
    }
}

